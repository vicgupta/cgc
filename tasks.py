from textwrap import dedent
from crewai import Task

class ContentGenerationTasks():
    def planner_task(self, agent, content_prompt, context_files, context_purpose, content_files):
        return Task(
            description=dedent(f"""\
                Analyse the prompt given by the user and fully understand the user's needs and the what final content that will be generated needs 
                to exactly be. The final goal of the final output generated by the entire crew will be a markdown formatted writing piece
                that will be stylized in the writing style of the context files and including the key content given from the content files, 
                so keep that thought at the forefront of the process when planning through this task. There are several jobs for you to do in this task:
                
                After analyzing the prompt, create a more detailed and more goal oriented version of the prompt to be passed down to your coworkers,
                who are a researcher, a writer, and a critic.
                Read the context files in whatever file format they are given in, understand which parts of this file need to be used for context purposes, whether that is through 
                your own judgement or through the context purpose provided by the user, and determine which parts of the context files will actually be useful for the writer to get 
                context for the writing style from, and convert these useful parts into a consolidated markdown document to be passed down to the other agents.
                Read the content files in whatever file format they are given in, and analyze which content in the file is actually relevant to the writing piece the prompt asks for, and gather this content
                into another markdown document to be passed down.
                If there are no content files given, make a note of that in the plan so that the researcher knows it needs to fully research all the content.
                Based on the prompt and the understood user needs, detail a list of parameters that this project requires so that the critic can double check against these parameters
                at the end to ensure exemplary results are given.
                With all of this information, create an in depth plan of action that highlights a thorough list of tasks for each of your coworkers to do,
                providing the detailed prompt in the beginning, and by agent name, delegating necessary tasks to each of the others, giving them all of the
                information scraped from your job. Ensure that the plan created is crafted with the intention of achieving the clear vision the user expects.
                Ensure that in this plan, all of the information you have compiled, including the detailed prompt, the context markdown file, and the content markdown files
                are clearly marked as such.
                               
                Prompt: {content_prompt}
                Context files: {context_files}
                Context purpose: {context_purpose}
                Content files: {content_files}
            """),
            expected_output=dedent(f"""\
                An in depth plan of action that highlights a thorough list of tasks for each of your coworkers to do,
                providing the detailed prompt in the beginning, and by agent name, delegating necessary tasks to each of the others, giving them all of the
                information scraped from your job. Ensure that the plan created is crafted with the intention of achieving the clear vision the user expects.                    
            """),
            agent=agent,
            async_execution=True
        )
    
    def research_task(self, agent, context_files):
        return Task(
            description=dedent(f"""\
                Using the detailed prompt provided by the planner, scrape through the context and content markdown files given
                by the planner and scrape through to find any relevant data and content that can be used for a writing piece written
                on the topic of the prompt. Then, conduct comprehensive research on the web to find relevant, credible, recent, professional, 
                and industry-specific information on the detailed prompt. If the context_files provided by the user are urls, make sure to first
                look through similar sites to that url for information, and then search on the broader web afterwards for more information.
                Make sure to look for a variety of specific data, statistics, quotes, and any other credible and citable information available 
                on the topic at hand. If there are no content files provided by the planner, check for relevant data from the context files provided by the
                planner, and then go straight to the web searching phase. Ensure that all of the tasks delegated for the researcher are completed thoroughly.
                
                context_files: {context_files}               
            """),
            expected_output=dedent(f"""\
                A detailed report compiling all of the key findings on this topic that can be used for a writing piece, compiled from
                the files provided by planner as well as the information scraped from web research."""),
            agent=agent
        )
    
    def writer_task(self, agent):
        return Task(
            description=dedent(f"""\
                Take the given context markdown files from the planner, the detailed prompt from the planner, as well as the detailed report from the researcher.
                Using the context files, conduct an in-depth analysis to identify patters of language and stylistic quality of the text.
                This is the style that the new content will be written in. Once this writing style is learned, take the detailed report from the researcher,
                analyze it and identify all the content from the report that can be used to write a new writing piece on the topic of the detailed prompt, and in the
                format and style of the context files. Ensure that there are no spelling or grammar errors, and create a markdown file with the content
                with the markdown format similar to that of the context files.
            """),
            expected_output=dedent(f"""\
            A markdown file with a clear, accurate, stylistically consistent, writing piece that clearly reflects the writing prompt."""),
            agent=agent
        )
    
    def critic_task(self, agent, content_prompt, context_files, context_purpose, content_files):
        return Task(
            description=dedent(f"""\
                Take the specific parameters to check against that the planner has provided. Analyze the plan created by the planner as well as the initial user prompt,
                and thoroughly understand all the user needs and tasks. Take the research provided by the researcher, and check to ensure the provided information
                was well researched and covers the entire scope of the topic. If you feel that there is something missing from the research provided by the researcher, 
                take it upon yourself to research this missing information on the web. Then, take on the role of the writer and based on the stylistic quality and
                format given by the writing from the writer, add this missing information to create a complete and improved version of the writing piece.
                
                If the research provided is thorough but you feel that the writing from the writer is missing any key details from the research, take it upon yourself
                to become the writer and based on the stylistic quality and format given by the writing from the writer, add this missing information to create a complete 
                and improved version of the writing piece.
                               
                
                If you feel that in the revision process, it is deemed really necessary, you can access the original context files, context purpose, and content files
                provided by the user to fill in any missing blanks that are present. Access these things if extremely necessary, you can do without these if not needed.
                For your information, the context files are to give context to the writing style, the context purpose is to give the specific things that need to be
                used from the context files, and the content files provide the content that can be used in the actual writing piece created, if it is relevant and accurate to the prompt.
                               
                Once this revision process is thoroughly done, the writing piece can be considered complete and ready for output.
                
                User prompt: {content_prompt}
                Context files: {context_files}
                Context purpose: {context_purpose}
                Content files: {content_files}
            """),
            expected_output=dedent(f"""\
                A complete professional writing piece in markdown format.
            """),
            agent=agent
        )